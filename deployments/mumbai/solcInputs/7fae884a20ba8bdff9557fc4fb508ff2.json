{
  "language": "Solidity",
  "sources": {
    "contracts/coin/Coins.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.20;\n\nimport {IERC20} from \"./interfaces/IERC20.sol\";\n\n/// @notice contract for ERC20 token (Coins).\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-20[ERC20] Non-Fungible Token Standardy as\n */\n/// @title an implementation of ERC20 fungible token contract.\n/// @author dchouhan-in@github.com\ncontract Coins is IERC20 {\n    uint256 internal _totalSupply;\n\n    // token name\n    string internal _name;\n    // token symbol\n    string internal _symbol;\n\n    // contract owner, currently immutable\n    address internal _deployer;\n\n    mapping(address account => uint256) internal _balances;\n\n    mapping(address account => mapping(address spender => uint256))\n        internal _allowances;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` and `deployer` to the token collection.\n     */\n    constructor(string memory tokenName, string memory tokenSymbol) {\n        _name = tokenName;\n        _symbol = tokenSymbol;\n        _deployer = msg.sender;\n        _mint(msg.sender, 1000 * 1e18);\n    }\n\n    /// @dev Returns name of token\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    /// @dev Returns name of token\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    /// @notice total tokens ever issued\n    /// @dev Returns total supply\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /** \n     *  @dev Returns total decimals used in representation,\n    i.e : if the balance of address is 1e17, it means the address owns .1 of the Coin.\n\n    */\n    function decimals() external pure virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @dev returns balance of an address\n    function balanceOf(\n        address account\n    ) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /// @dev transfers coins to the address\n    function transfer(\n        address to,\n        uint256 value\n    ) external override returns (bool) {\n        require(_balances[msg.sender] >= value);\n\n        _balances[msg.sender] -= value;\n        _balances[to] += value;\n        return true;\n    }\n\n    /// @notice returns the amount a third party spender can spend on address's behalf\n    /// @dev returns allowance\n    function allowance(\n        address owner,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /// @notice approve a third party spender can spend on address's behalf\n    /// @dev approve spender\n    function approve(\n        address spender,\n        uint256 value\n    ) external override returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        return true;\n    }\n\n    /// @dev transfer coins `from` address to `to` address, caller must be approved first.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external override returns (bool) {\n        require(_balances[from] >= value, \"insufficient balance\");\n        require(\n            _allowances[from][msg.sender] >= value,\n            \"insufficient balance!\"\n        );\n        _balances[from] -= value;\n        _balances[to] += value;\n        _allowances[from][msg.sender] -= value;\n        return true;\n    }\n\n    /** \n     @dev mints `_amount` number of coins to `to` address, only owner of contract i.e deployer, can mint.\n     */\n    function mint(address _to, uint256 _amount) public virtual {\n        require(msg.sender == _deployer, \"only contract owner can mint!\");\n        _balances[_to] += _amount;\n        _totalSupply += _amount;\n    }\n\n    function _mint(address _to, uint256 _amount) internal virtual {\n        require(msg.sender == _deployer, \"only contract owner can mint!\");\n        _balances[_to] += _amount;\n        _totalSupply += _amount;\n    }\n    // TODO: burn, mint internal, common transfer.\n}\n"
    },
    "contracts/coin/interfaces/IERC20.sol": {
      "content": "pragma solidity ^0.8.20;\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n"
    },
    "contracts/weth_dummy/Weth.sol": {
      "content": "pragma solidity 0.8.20;\n\nimport {Coins} from \"../coin/Coins.sol\";\n\ncontract WETH is Coins {\n    constructor() Coins(\"dummy wrapped ether\", \"WETH\") {}\n\n    function mint(address _to, uint256 _amount) public override {}\n\n    function _mint(address _to, uint256 _amount) internal override {}\n\n    function deposit() public payable {\n        require(msg.value > 10e8, \"atleast 10e8 wei must be sent!\");\n        uint _amount = msg.value / 10e8;\n        _balances[msg.sender] += _amount;\n        _totalSupply += _amount;\n    }\n\n    function withdraw(uint256 amount) public payable {\n        uint _amount = amount * 10e8;\n        require(_balances[msg.sender] >= amount, \"insufficient balance!\");\n        _balances[msg.sender] -= amount;\n        _totalSupply -= amount;\n        bool status = payable(msg.sender).send(_amount);\n        require(status == true, \"caller cannot receive amount!\");\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return 10;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}